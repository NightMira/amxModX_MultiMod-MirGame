name: Add to Project

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: 🔑 Authenticate GitHub CLI
        run: |
          echo "${{ secrets.PRIVATE_REPO_TOKEN }}" | gh auth login --with-token

      - name: 📊 Get project data
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
          USER: NightMira
          PROJECT_NUMBER: 3
        run: |
          echo "## 🗂️ Project Automation" >> $GITHUB_STEP_SUMMARY
          
          # Получаем данные пользовательского проекта
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                  title
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user=$USER -f number=$PROJECT_NUMBER > project_data.json

          # Парсим ответ и сохраняем ID в environment variables
          echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'PROJECT_TITLE='$(jq -r '.data.user.projectV2.title' project_data.json) >> $GITHUB_ENV
          
          # Пытаемся найти поле Status
          STATUS_FIELD_ID=$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json)
          if [ "$STATUS_FIELD_ID" != "null" ] && [ -n "$STATUS_FIELD_ID" ]; then
            echo 'STATUS_FIELD_ID='$STATUS_FIELD_ID >> $GITHUB_ENV
            echo 'TODO_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") | .id' project_data.json) >> $GITHUB_ENV
          fi
          
          # Пытаемся найти поле Date posted
          DATE_FIELD_ID=$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json)
          if [ "$DATE_FIELD_ID" != "null" ] && [ -n "$DATE_FIELD_ID" ]; then
            echo 'DATE_FIELD_ID='$DATE_FIELD_ID >> $GITHUB_ENV
          fi

          echo "📊 Project: $PROJECT_TITLE" >> $GITHUB_STEP_SUMMARY
          echo "🔧 Project ID: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY

      - name: ➕ Add item to project
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          # Определяем ID элемента в зависимости от типа события
          if [ "${{ github.event_name }}" = "issues" ]; then
            CONTENT_ID="${{ github.event.issue.node_id }}"
            ITEM_TYPE="issue"
            ITEM_NUMBER=${{ github.event.issue.number }}
          else
            CONTENT_ID="${{ github.event.pull_request.node_id }}"
            ITEM_TYPE="pull request"
            ITEM_NUMBER=${{ github.event.pull_request.number }}
          fi

          echo "🎯 Adding $ITEM_TYPE #$ITEM_NUMBER to project..." >> $GITHUB_STEP_SUMMARY

          # Добавляем элемент в проект
          item_id=$(gh api graphql -f query='
            mutation($project:ID!, $content:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $content}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f content=$CONTENT_ID --jq '.data.addProjectV2ItemById.item.id')

          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
          echo "✅ Added to project! Item ID: $item_id" >> $GITHUB_STEP_SUMMARY

      - name: 📅 Get current date
        if: env.ITEM_ID != ''
        run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: ⚙️ Set field values
        if: env.ITEM_ID != '' && (env.STATUS_FIELD_ID != '' || env.DATE_FIELD_ID != '')
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "🔧 Setting field values..." >> $GITHUB_STEP_SUMMARY
          
          # Базовый запрос для установки значений
          QUERY_BASE='
            mutation ($project: ID!, $item: ID!'
          
          # Добавляем части запроса в зависимости от доступных полей
          VARIABLES="-f project=$PROJECT_ID -f item=$ITEM_ID"
          QUERY_FIELDS=""
          QUERY_BODY=""
          
          if [ -n "$STATUS_FIELD_ID" ] && [ -n "$TODO_OPTION_ID" ]; then
            QUERY_BASE+=', $status_field: ID!, $status_value: String!'
            VARIABLES+=" -f status_field=$STATUS_FIELD_ID -f status_value=$TODO_OPTION_ID"
            QUERY_FIELDS+='
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                }
              }) {
                projectV2Item {
                  id
                }
              }'
          fi
          
          if [ -n "$DATE_FIELD_ID" ]; then
            QUERY_BASE+=', $date_field: ID!, $date_value: Date!'
            VARIABLES+=" -f date_field=$DATE_FIELD_ID -f date_value=$DATE"
            QUERY_FIELDS+='
              set_date: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: {
                  date: $date_value
                }
              }) {
                projectV2Item {
                  id
                }
              }'
          fi
          
          QUERY_BASE+=') {'
          FULL_QUERY="$QUERY_BASE $QUERY_FIELDS }"
          
          if [ -n "$QUERY_FIELDS" ]; then
            gh api graphql -f query="$FULL_QUERY" $VARIABLES --silent
            echo "✅ Field values set successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No fields to set (Status or Date posted fields not found)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Create summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Workflow Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "- **Issue:** #${{ github.event.issue.number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Title:** ${{ github.event.issue.title }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Project:** $PROJECT_TITLE" >> $GITHUB_STEP_SUMMARY
          echo "- **Project URL:** https://github.com/users/NightMira/projects/3" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successfully added to project" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Cleanup
        if: always()
        run: |
          gh auth logout || true