name: Auto Label Issues and PRs

on:
  workflow_dispatch:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: üè∑Ô∏è Auto-label issues and PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
              const issueData = context.payload.issue;
              const prData = context.payload.pull_request;
              
              if (!issueData && !prData) {
                console.log('‚ùå No issue or PR data found');
                return;
              }

              const target = issueData || prData;
              const { title, body, number, labels = [] } = target;
              const type = issueData ? 'issue' : 'pull_request';

              if (!title) {
                console.log(`‚ö†Ô∏è No title found for ${type} #${number}`);
                return;
              }

              console.log(`üìã Processing ${type}: "${title}" (#${number})`);

              const content = `${title} ${body || ''}`.toLowerCase();
              const newLabels = new Set(labels.map(label => label.name));

              // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ labels.yml
              const rules = [
                { keywords: ['bug', '–æ—à–∏–±–∫–∞', 'fix', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–±–∞–≥'], label: 'bug' },
                { keywords: ['feature', '—Ñ—É–Ω–∫—Ü–∏—è', '—É–ª—É—á—à–µ–Ω–∏–µ', '–Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '–¥–æ–±–∞–≤–∏—Ç—å'], label: 'feature' },
                { keywords: ['refactor', '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞'], label: 'refactor' },
                { keywords: ['build', '—Å–±–æ—Ä–∫–∞', 'ci/cd', 'compile', '–∫–æ–º–ø–∏–ª—è—Ü–∏—è'], label: 'build' },
                { keywords: ['doc', 'documentation', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 'readme', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'], label: 'docs' },
                { keywords: ['test', '—Ç–µ—Å—Ç', 'testing', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'], label: 'test' },
                { keywords: ['critical', '–∫—Ä–∏—Ç–∏—á', '–±–ª–æ–∫–∏—Ä', '—Å—Ä–æ—á–Ω–æ', '–∞–≤–∞—Ä–∏–π'], label: 'priority-critical' },
                { keywords: ['high', '–≤—ã—Å–æ–∫', '–≤–∞–∂–Ω', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'], label: 'priority-high' },
                { keywords: ['medium', '—Å—Ä–µ–¥–Ω', '–æ–±—ã—á–Ω'], label: 'priority-medium' },
                { keywords: ['low', '–Ω–∏–∑–∫', '—É–ª—É—á—à–µ–Ω', '–Ω–µ–≤–∞–∂–Ω'], label: 'priority-low' },
                { keywords: ['compiler', '–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä', 'amxxpc', 'amxx'], label: 'component-compiler' },
                { keywords: ['ci/cd', 'pipeline', 'github action', 'workflow', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'], label: 'component-ci-cd' },
                { keywords: ['plugin', '–ø–ª–∞–≥–∏–Ω', '.sma', '.amxx', '–º–æ–¥—É–ª—å'], label: 'component-plugins' },
                { keywords: ['doc', '–¥–æ–∫—É–º–µ–Ω—Ç', 'readme', 'wiki', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'], label: 'component-docs' },
                { keywords: ['major', '–º–∞–∂–æ—Ä', 'x.0.0'], label: 'version-major' },
                { keywords: ['minor', '–º–∏–Ω–æ—Ä', '0.y.0'], label: 'version-minor' },
                { keywords: ['patch', '–ø–∞—Ç—á', '0.0.z', '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'], label: 'version-patch' },
                { keywords: ['dev', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'development'], label: 'stage-dev' },
                { keywords: ['alpha', '–∞–ª—å—Ñ–∞'], label: 'stage-alpha' },
                { keywords: ['beta', '–±–µ—Ç–∞'], label: 'stage-beta' },
                { keywords: ['rc', 'release candidate', '—Ä–µ–ª–∏–∑-–∫–∞–Ω–¥–∏–¥–∞—Ç'], label: 'stage-rc' },
                { keywords: ['release', '—Ä–µ–ª–∏–∑', 'production', '–ø—Ä–æ–¥–∞–∫—à–µ–Ω'], label: 'stage-release' },
                { keywords: ['hotfix', '—Ö–æ—Ç—Ñ–∏–∫—Å', '—Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'], label: 'stage-hotfix' }
              ];

              rules.forEach(rule => {
                if (rule.keywords.some(keyword => content.includes(keyword))) {
                  newLabels.add(rule.label);
                }
              });

              // –î–ª—è PR –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
              if (prData) {
                newLabels.add('component-plugins');
                
                const { additions, deletions } = prData;
                const totalChanges = additions + deletions;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if (totalChanges > 500) {
                  newLabels.add('priority-critical');
                } else if (totalChanges > 200) {
                  newLabels.add('priority-high');
                } else if (totalChanges > 50) {
                  newLabels.add('priority-medium');
                } else {
                  newLabels.add('priority-low');
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä PR
                if (totalChanges > 150) {
                  newLabels.add('size-large');
                } else if (totalChanges > 50) {
                  newLabels.add('size-medium');
                } else if (totalChanges > 0) {
                  newLabels.add('size-small');
                }
              }

              const labelsToAdd = Array.from(newLabels);

              if (labelsToAdd.length > 0) {
                console.log(`üè∑Ô∏è Setting labels: ${labelsToAdd.join(', ')}`);
                
                await github.rest.issues.setLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: number,
                  labels: labelsToAdd
                });
                
                console.log('‚úÖ Labels updated successfully');
              } else {
                console.log('‚ÑπÔ∏è No labels to add');
              }

            } catch (error) {
              console.error('üí• Error in auto-label workflow:', error.message);
              // –ù–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º –≤–µ—Å—å workflow –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–µ—Ç–æ–∫
            }