name: Check Token Permissions

on:
  workflow_dispatch:

jobs:
  check-token:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: üîê Test GITHUB_TOKEN permissions
        env:
          REPO: ${{ github.repository }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Testing token permissions for: $REPO"
          
          # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
          echo "üìã Testing repository access..."
          repo_response=$(curl -s -w "%{http_code}" -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO")
          
          http_code=$(echo "$repo_response" | tail -n1)
          response_body=$(echo "$repo_response" | sed '$d')
          
          if [ "$http_code" = "200" ]; then
            echo "‚úÖ Repository access: OK (200)"
            repo_name=$(echo "$response_body" | jq -r '.full_name')
            echo "üì¶ Repository: $repo_name"
          else
            echo "‚ùå Repository access failed: HTTP $http_code"
            echo "Response: $response_body"
            exit 1
          fi
          
          # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ issue
          echo "üìù Testing issue creation rights..."
          issue_data='{"title":"Test Issue - Please Delete","body":"This is a test issue to check token permissions.","labels":["test"]}'
          
          issue_response=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "$issue_data" \
            "https://api.github.com/repos/$REPO/issues")
          
          issue_http_code=$(echo "$issue_response" | tail -n1)
          issue_body=$(echo "$issue_response" | sed '$d')
          
          if [ "$issue_http_code" = "201" ]; then
            echo "‚úÖ Issue creation: OK (201)"
            issue_number=$(echo "$issue_body" | jq -r '.number')
            issue_url=$(echo "$issue_body" | jq -r '.html_url')
            echo "üìã Created test issue: $issue_url"
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π issue
            sleep 2
            delete_response=$(curl -s -w "%{http_code}" -X PATCH \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              -d '{"state":"closed"}' \
              "https://api.github.com/repos/$REPO/issues/$issue_number")
            
            if [ "$(echo "$delete_response" | tail -n1)" = "200" ]; then
              echo "‚úÖ Issue closed successfully"
            fi
            
          elif [ "$issue_http_code" = "403" ]; then
            echo "‚ùå Issue creation: Permission denied (403)"
            echo "‚ÑπÔ∏è Check repository permissions for GITHUB_TOKEN"
          else
            echo "‚ö†Ô∏è Issue creation: HTTP $issue_http_code"
            echo "Response: $issue_body"
          fi
          
          # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –º–µ—Ç–∫–∏
          echo "üè∑Ô∏è Testing label access..."
          labels_response=$(curl -s -w "%{http_code}" -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/labels?per_page=1")
          
          labels_http_code=$(echo "$labels_response" | tail -n1)
          
          if [ "$labels_http_code" = "200" ]; then
            echo "‚úÖ Labels access: OK (200)"
          elif [ "$labels_http_code" = "403" ]; then
            echo "‚ùå Labels access: Permission denied (403)"
          else
            echo "‚ö†Ô∏è Labels access: HTTP $labels_http_code"
          fi
          
          echo "üéâ Token check completed!"