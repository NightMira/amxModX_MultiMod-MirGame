name: Auto Label Issues and PRs

on:
  workflow_dispatch:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: üè∑Ô∏è Auto-label issues and PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          script: |
            try {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
              const issueData = context.payload.issue;
              const prData = context.payload.pull_request;
              
              if (!issueData && !prData) {
                console.log('‚ùå No issue or PR data found');
                return;
              }

              const target = issueData || prData;
              const { title, body, number, labels = [] } = target;
              const type = issueData ? 'issue' : 'pull_request';

              if (!title) {
                console.log(`‚ö†Ô∏è No title found for ${type} #${number}`);
                return;
              }

              console.log(`üìã Processing ${type}: "${title}" (#${number})`);

              const content = `${title} ${body || ''}`.toLowerCase();
              const newLabels = new Set(labels.map(label => label.name));

              // üìã Task types
              if (content.includes('bug') || content.includes('–æ—à–∏–±–∫–∞') || content.includes('error') || content.includes('fix') || content.includes('–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') || content.includes('–±–∞–≥')) {
                newLabels.add('bug');
              }

              if (content.includes('feature') || content.includes('—Ñ—É–Ω–∫—Ü–∏—è') || content.includes('—É–ª—É—á—à–µ–Ω–∏–µ') || content.includes('–Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å') || content.includes('–¥–æ–±–∞–≤–∏—Ç—å')) {
                newLabels.add('feature');
              }

              if (content.includes('refactor') || content.includes('—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥') || content.includes('–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è') || content.includes('–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞')) {
                newLabels.add('refactor');
              }

              if (content.includes('build') || content.includes('—Å–±–æ—Ä–∫–∞') || content.includes('ci/cd') || content.includes('compile') || content.includes('–∫–æ–º–ø–∏–ª—è—Ü–∏—è')) {
                newLabels.add('build');
              }

              if (content.includes('doc') || content.includes('documentation') || content.includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è') || content.includes('readme') || content.includes('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')) {
                newLabels.add('docs');
              }

              if (content.includes('test') || content.includes('—Ç–µ—Å—Ç') || content.includes('testing') || content.includes('—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')) {
                newLabels.add('test');
              }

              // üö® Priorities
              if (content.includes('critical') || content.includes('–∫—Ä–∏—Ç–∏—á') || content.includes('–±–ª–æ–∫–∏—Ä') || content.includes('—Å—Ä–æ—á–Ω–æ') || content.includes('–∞–≤–∞—Ä–∏–π')) {
                newLabels.add('priority-critical');
              } else if (content.includes('high') || content.includes('–≤—ã—Å–æ–∫') || content.includes('–≤–∞–∂–Ω') || content.includes('–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')) {
                newLabels.add('priority-high');
              } else if (content.includes('medium') || content.includes('—Å—Ä–µ–¥–Ω') || content.includes('–æ–±—ã—á–Ω')) {
                newLabels.add('priority-medium');
              } else if (content.includes('low') || content.includes('–Ω–∏–∑–∫') || content.includes('—É–ª—É—á—à–µ–Ω') || content.includes('–Ω–µ–≤–∞–∂–Ω')) {
                newLabels.add('priority-low');
              }

              // üîß Components
              if (content.includes('compiler') || content.includes('–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä') || content.includes('amxxpc') || content.includes('amxx')) {
                newLabels.add('component-compiler');
              }

              if (content.includes('ci/cd') || content.includes('pipeline') || content.includes('github action') || content.includes('workflow') || content.includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è')) {
                newLabels.add('component-ci-cd');
              }

              if (content.includes('plugin') || content.includes('–ø–ª–∞–≥–∏–Ω') || content.includes('.sma') || content.includes('.amxx') || content.includes('–º–æ–¥—É–ª—å')) {
                newLabels.add('component-plugins');
              }

              if (content.includes('doc') || content.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || content.includes('readme') || content.includes('wiki') || content.includes('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')) {
                newLabels.add('component-docs');
              }

              // üè∑Ô∏è Versioning
              if (content.includes('major') || content.includes('–º–∞–∂–æ—Ä') || content.includes('x.0.0')) {
                newLabels.add('version-major');
              }

              if (content.includes('minor') || content.includes('–º–∏–Ω–æ—Ä') || content.includes('0.y.0')) {
                newLabels.add('version-minor');
              }

              if (content.includes('patch') || content.includes('–ø–∞—Ç—á') || content.includes('0.0.z') || content.includes('hotfix') || content.includes('–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')) {
                newLabels.add('version-patch');
              }

              // üöÄ Release stages
              if (content.includes('dev') || content.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞') || content.includes('development')) {
                newLabels.add('stage-dev');
              }

              if (content.includes('alpha') || content.includes('–∞–ª—å—Ñ–∞')) {
                newLabels.add('stage-alpha');
              }

              if (content.includes('beta') || content.includes('–±–µ—Ç–∞')) {
                newLabels.add('stage-beta');
              }

              if (content.includes('rc') || content.includes('release candidate') || content.includes('—Ä–µ–ª–∏–∑-–∫–∞–Ω–¥–∏–¥–∞—Ç')) {
                newLabels.add('stage-rc');
              }

              if (content.includes('release') || content.includes('—Ä–µ–ª–∏–∑') || content.includes('production') || content.includes('–ø—Ä–æ–¥–∞–∫—à–µ–Ω')) {
                newLabels.add('stage-release');
              }

              if (content.includes('hotfix') || content.includes('—Ö–æ—Ç—Ñ–∏–∫—Å') || content.includes('—Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')) {
                newLabels.add('stage-hotfix');
              }

              // –î–ª—è PR –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
              if (prData) {
                // –í—Å–µ PR —Å–≤—è–∑–∞–Ω—ã —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
                newLabels.add('component-plugins');
                
                const { additions, deletions } = prData;
                const totalChanges = additions + deletions;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if (totalChanges > 500) {
                  newLabels.add('priority-critical');
                } else if (totalChanges > 200) {
                  newLabels.add('priority-high');
                } else if (totalChanges > 50) {
                  newLabels.add('priority-medium');
                } else if (totalChanges > 0) {
                  newLabels.add('priority-low');
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É stage-dev –¥–ª—è PR –≤ dev –≤–µ—Ç–∫—É
                const baseRef = prData.base.ref.toLowerCase();
                if (baseRef === 'dev') {
                  newLabels.add('stage-dev');
                }
              }

              const labelsToAdd = Array.from(newLabels);

              if (labelsToAdd.length > 0) {
                console.log(`üè∑Ô∏è Setting labels: ${labelsToAdd.join(', ')}`);
                
                await github.rest.issues.setLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: number,
                  labels: labelsToAdd
                });
                
                console.log('‚úÖ Labels updated successfully');
              } else {
                console.log('‚ÑπÔ∏è No labels to add');
              }

            } catch (error) {
              console.error('üí• Error in auto-label workflow:', error.message);
              // –ù–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º –≤–µ—Å—å workflow –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–µ—Ç–æ–∫
            }