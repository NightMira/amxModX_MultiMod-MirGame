name: AMXX Build System

on:
  push:
    branches: [main, dev, hotfix/*, alpha/*, beta/*, rc/*, feature/*, bugfix/*]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          fetch-depth: 0

      - name: 📦 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-i386 lib32stdc++6 lib32z1 lib32gcc-s1 wget tar

      - name: 🔧 Download AMXX Compiler
        run: |
          wget -q https://github.com/NightMira/amxmodx_1-9/releases/download/v1.9/amxmodx19.tar
          tar -xf amxmodx19.tar
          chmod +x amxxpc

      - name: 🏷️ Generate build number
        id: build-number
        run: |
          # Генерируем номер сборки
          python3 update_version.py build-mirgame
          
          # ДИАГНОСТИКА: Проверяем что файл существует и содержит номер
          echo "🔍 Проверка version.inc:"
          cat scripting/include/version.inc | grep PROJECT_BUILD
          
          # Извлекаем номер сборки РАЗНЫМИ способами
          MIRGAME_BUILD=$(grep 'PROJECT_BUILD' scripting/include/version.inc | awk -F '"' '{print $2}')
          MIRGAME_BUILD_ALT=$(sed -n 's/^#define PROJECT_BUILD "\([^"]*\)"/\1/p' scripting/include/version.inc)
          
          echo "📝 Номер сборки (grep): $MIRGAME_BUILD"
          echo "📝 Номер сборки (sed): $MIRGAME_BUILD_ALT"
          
          # Используем первый непустой вариант
          if [ -n "$MIRGAME_BUILD" ]; then
            FINAL_BUILD="$MIRGAME_BUILD"
          elif [ -n "$MIRGAME_BUILD_ALT" ]; then
            FINAL_BUILD="$MIRGAME_BUILD_ALT"
          else
            FINAL_BUILD="00U0001x"
          fi
          
          echo "✅ Финальный номер сборки: $FINAL_BUILD"
          
          # Устанавливаем переменные
          echo "MIRGAME_BUILD_NUMBER=$FINAL_BUILD" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$FINAL_BUILD" >> $GITHUB_ENV
          echo "build_number=$FINAL_BUILD" >> $GITHUB_OUTPUT

      - name: 🔍 Debug variables
        run: |
          echo "🔍 Проверка переменных:"
          echo "BUILD_NUMBER: $BUILD_NUMBER"
          echo "MIRGAME_BUILD_NUMBER: $MIRGAME_BUILD_NUMBER"
          echo "GITHUB_OUTPUT build_number: ${{ steps.build-number.outputs.build_number }}"
          
          # Проверяем что переменные не пустые
          if [ -z "$BUILD_NUMBER" ]; then
            echo "❌ ОШИБКА: BUILD_NUMBER пустая!"
            exit 1
          else
            echo "✅ BUILD_NUMBER установлена: $BUILD_NUMBER"
          fi

      - name: 🔍 Analyze build
        run: |
          echo "🔍 Анализ номера сборки:"
          python3 update_version.py decode-build

      - name: 🏗️ Compile plugins
        run: |
          mkdir -p compiled
          chmod +x compile.sh
          ./compile.sh

      - name: 📦 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amxx-plugins-${{ env.BUILD_NUMBER }}
          path: |
            compiled/*.amxx
            compile.log
          retention-days: 30

      - name: 📋 Create build summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** 0.0.6" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** amxx-plugins-${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Version Details" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          python3 update_version.py info >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔧 Compilation Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -10 compile.log | grep -E "✅|❌|⚠️|Compilation summary:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY