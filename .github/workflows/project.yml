name: Project Automation (GitHub CLI)

on:
  issues:
    types: [opened, reopened, closed, labeled]
  pull_request:
    types: [opened, reopened, closed, ready_for_review, labeled]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues/PRs to project'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PROJECT_NUMBER: 3
  PROJECT_OWNER: NightMira

jobs:
  project-automation:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: 📦 Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: 🔑 Authenticate GitHub CLI
        run: |
          echo "${{ secrets.PRIVATE_REPO_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: 📋 Process project items (GitHub CLI)
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "## 🗂️ Project Automation Summary (GitHub CLI)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Определяем тип события и данные
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_TYPE="issue"
            ITEM_NUMBER=${{ github.event.issue.number }}
            ITEM_TITLE="${{ github.event.issue.title }}"
            ITEM_ACTION="${{ github.event.action }}"
            ITEM_URL="${{ github.event.issue.html_url }}"
          else
            ITEM_TYPE="pull request"
            ITEM_NUMBER=${{ github.event.pull_request.number }}
            ITEM_TITLE="${{ github.event.pull_request.title }}"
            ITEM_ACTION="${{ github.event.action }}"
            ITEM_URL="${{ github.event.pull_request.html_url }}"
          fi

          echo "### 📝 $ITEM_TYPE Processing" >> $GITHUB_STEP_SUMMARY
          echo "- **$ITEM_TYPE:** #$ITEM_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Title:** $ITEM_TITLE" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** $ITEM_ACTION" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** $ITEM_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🎯 Add item to project (GraphQL)
        if: github.event_name == 'issues' && github.event.action == 'opened' || github.event_name == 'pull_request' && github.event.action == 'opened'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### 🎯 Adding to Project via GraphQL" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_ID="${{ github.event.issue.node_id }}"
            ITEM_NUMBER=${{ github.event.issue.number }}
          else
            ITEM_ID="${{ github.event.pull_request.node_id }}"
            ITEM_NUMBER=${{ github.event.pull_request.number }}
          fi

          # GraphQL запрос для получения ID проекта (исправленная версия)
          PROJECT_ID=$(gh api graphql -f query='
            query($owner: String!, $projectNumber: Int!) {
              organization(login: $owner) {
                projectV2(number: $projectNumber) {
                  id
                  title
                }
              }
            }' -f owner="$PROJECT_OWNER" -f projectNumber="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')

          if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
            echo "📊 Project ID: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
            
            # Добавляем элемент в проект
            ADD_RESULT=$(gh api graphql -f query='
              mutation($projectId: ID!, $itemId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $itemId}) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID")

            if echo "$ADD_RESULT" | grep -q "addProjectV2ItemById"; then
              echo "✅ Successfully added to project!" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Failed to add to project" >> $GITHUB_STEP_SUMMARY
              echo "Response: $ADD_RESULT" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Could not find project $PROJECT_NUMBER in organization $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
            echo "PROJECT_ID: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔄 Update item status (GraphQL)
        if: github.event.action == 'closed' || github.event.action == 'reopened'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### 🔄 Updating Item Status" >> $GITHUB_STEP_SUMMARY
          
          # Сначала получаем ID проекта
          PROJECT_ID=$(gh api graphql -f query='
            query($owner: String!, $projectNumber: Int!) {
              organization(login: $owner) {
                projectV2(number: $projectNumber) {
                  id
                  title
                }
              }
            }' -f owner="$PROJECT_OWNER" -f projectNumber="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')

          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "❌ Project not found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_ID="${{ github.event.issue.node_id }}"
            ITEM_STATE="${{ github.event.issue.state }}"
          else
            ITEM_ID="${{ github.event.pull_request.node_id }}"
            ITEM_STATE="${{ github.event.pull_request.state }}"
          fi

          # Упрощенная версия - просто логируем, без сложных обновлений
          echo "📋 Item state changed to: $ITEM_STATE" >> $GITHUB_STEP_SUMMARY
          echo "🔧 Manual status update may be required in project" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Sync all open items (Manual trigger)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### 🔍 Syncing All Open Items to Project" >> $GITHUB_STEP_SUMMARY
          
          # Получаем ID проекта (исправленная версия)
          PROJECT_ID=$(gh api graphql -f query='
            query($owner: String!, $projectNumber: Int!) {
              organization(login: $owner) {
                projectV2(number: $projectNumber) {
                  id
                  title
                }
              }
            }' -f owner="$PROJECT_OWNER" -f projectNumber="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')
          
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "❌ Project not found. Please check:" >> $GITHUB_STEP_SUMMARY
            echo "- Organization: $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
            echo "- Project number: $PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "- Token permissions" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "📊 Syncing to project: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          
          # Упрощенная синхронизация - только открытые issues
          echo "📦 Syncing open issues..." >> $GITHUB_STEP_SUMMARY
          
          # Получаем открытые issues
          OPEN_ISSUES=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issues(first: 50, states: OPEN) {
                  nodes {
                    id
                    number
                    title
                    url
                  }
                }
              }
            }' -f owner="$PROJECT_OWNER" -f repo="${{ github.event.repository.name }}" \
            --jq '.data.repository.issues.nodes[] | "\(.number): \(.title)"')
          
          if [ -n "$OPEN_ISSUES" ]; then
            echo "📋 Open issues found:" >> $GITHUB_STEP_SUMMARY
            echo "$OPEN_ISSUES" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No open issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Получаем открытые PR
          echo "📦 Syncing open pull requests..." >> $GITHUB_STEP_SUMMARY
          OPEN_PRS=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                pullRequests(first: 50, states: OPEN) {
                  nodes {
                    id
                    number
                    title
                    url
                  }
                }
              }
            }' -f owner="$PROJECT_OWNER" -f repo="${{ github.event.repository.name }}" \
            --jq '.data.repository.pullRequests.nodes[] | "\(.number): \(.title)"')
          
          if [ -n "$OPEN_PRS" ]; then
            echo "📋 Open PRs found:" >> $GITHUB_STEP_SUMMARY
            echo "$OPEN_PRS" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No open PRs found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ Sync completed. Manual addition required for bulk operations." >> $GITHUB_STEP_SUMMARY

      - name: 🧪 Debug project access
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### 🧪 Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Проверяем доступ к организации
          ORG_INFO=$(gh api graphql -f query='
            query($owner: String!) {
              organization(login: $owner) {
                name
                projectsV2(first: 10) {
                  nodes {
                    number
                    title
                    id
                  }
                }
              }
            }' -f owner="$PROJECT_OWNER" --jq '.data.organization')
          
          if [ -n "$ORG_INFO" ] && [ "$ORG_INFO" != "null" ]; then
            echo "✅ Access to organization confirmed" >> $GITHUB_STEP_SUMMARY
            echo "📊 Available projects:" >> $GITHUB_STEP_SUMMARY
            echo "$ORG_INFO" | jq -r '.projectsV2.nodes[] | "\(.number): \(.title) (ID: \(.id))"' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Cannot access organization $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
            echo "Please check:" >> $GITHUB_STEP_SUMMARY
            echo "- Token permissions" >> $GITHUB_STEP_SUMMARY
            echo "- Organization name" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Create final summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** $PROJECT_OWNER/Project#$PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Automatically processed by GitHub Actions with GitHub CLI*" >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Cleanup GitHub CLI auth
        if: always()
        run: |
          gh auth logout || true