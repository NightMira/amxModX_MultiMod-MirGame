name: Project Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  project-automation:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout code (with private token)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: üìã Add new items to project
        if: github.event_name == 'issues' && github.event.action == 'opened' || github.event_name == 'pull_request' && github.event.action == 'opened'
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "üéØ Adding ${{ github.event_name }} to project..."
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_URL="https://github.com/NightMira/amxModX_MultiMod-MirGame/issues/${{ github.event.issue.number }}"
          else
            ITEM_URL="https://github.com/NightMira/amxModX_MultiMod-MirGame/pull/${{ github.event.pull_request.number }}"
          fi
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–µ–∫—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ MirGame-Studio
          gh project item-add 2 \
            --owner MirGame-Studio \
            --url "$ITEM_URL"
          
          echo "‚úÖ Added to project successfully!"

      - name: üè∑Ô∏è Update project status
        if: github.event.action == 'closed' || github.event.action == 'reopened' || github.event.action == 'ready_for_review'
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "üîÑ Updating project status for ${{ github.event_name }} #${{ github.event.issue.number || github.event.pull_request.number }}"
          
          # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
          PROJECT_ID=$(gh api graphql -f query='
            query {
              organization(login: "MirGame-Studio") {
                projectV2(number: 2) {
                  id
                }
              }
            }
          ' | jq -r '.data.organization.projectV2.id')
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            CONTENT_ID="${{ github.event.issue.node_id }}"
          else
            CONTENT_ID="${{ github.event.pull_request.node_id }}"
          fi
          
          if [ -n "$PROJECT_ID" ] && [ -n "$CONTENT_ID" ]; then
            # –ù–∞—Ö–æ–¥–∏–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
            ITEM_ID=$(gh api graphql -f query='
              query {
                node(id: "'$PROJECT_ID'") {
                  ... on ProjectV2 {
                    items(first: 50) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            ' | jq -r '.data.node.items.nodes[] | select(.content.id == "'$CONTENT_ID'") | .id')
            
            if [ -n "$ITEM_ID" ]; then
              # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
              if [ "${{ github.event.action }}" = "closed" ]; then
                STATUS="Done"
              elif [ "${{ github.event.action }}" = "reopened" ] || [ "${{ github.event.action }}" = "ready_for_review" ]; then
                STATUS="In Progress"
              else
                STATUS="Todo"
              fi
              
              echo "üìä Setting status to: $STATUS"
              
              # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ–µ–∫—Ç–µ
              gh api graphql -f query='
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "'$PROJECT_ID'",
                    itemId: "'$ITEM_ID'",
                    fieldId: "Status",
                    value: {
                      singleSelectOptionId: "'$STATUS'"
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              '
            fi
          fi