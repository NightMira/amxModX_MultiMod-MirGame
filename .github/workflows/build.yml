name: Project Automation (GitHub CLI)

on:
  issues:
    types: [opened, reopened, closed, labeled]
  pull_request:
    types: [opened, reopened, closed, ready_for_review, labeled]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues/PRs to project'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PROJECT_NUMBER: 3
  PROJECT_OWNER: NightMira

jobs:
  project-automation:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: üì¶ Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: üîë Authenticate GitHub CLI
        run: |
          echo "${{ secrets.PRIVATE_REPO_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: üìã Process project items (GitHub CLI)
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "## üóÇÔ∏è Project Automation Summary (GitHub CLI)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_TYPE="issue"
            ITEM_NUMBER=${{ github.event.issue.number }}
            ITEM_TITLE="${{ github.event.issue.title }}"
            ITEM_ACTION="${{ github.event.action }}"
            ITEM_URL="${{ github.event.issue.html_url }}"
          else
            ITEM_TYPE="pull request"
            ITEM_NUMBER=${{ github.event.pull_request.number }}
            ITEM_TITLE="${{ github.event.pull_request.title }}"
            ITEM_ACTION="${{ github.event.action }}"
            ITEM_URL="${{ github.event.pull_request.html_url }}"
          fi

          echo "### üìù $ITEM_TYPE Processing" >> $GITHUB_STEP_SUMMARY
          echo "- **$ITEM_TYPE:** #$ITEM_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Title:** $ITEM_TITLE" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** $ITEM_ACTION" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** $ITEM_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üéØ Add item to project (GraphQL)
        if: github.event_name == 'issues' && github.event.action == 'opened' || github.event_name == 'pull_request' && github.event.action == 'opened'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### üéØ Adding to Project via GraphQL" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_ID="${{ github.event.issue.node_id }}"
            ITEM_NUMBER=${{ github.event.issue.number }}
          else
            ITEM_ID="${{ github.event.pull_request.node_id }}"
            ITEM_NUMBER=${{ github.event.pull_request.number }}
          fi

          # GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–µ–∫—Ç–∞
          PROJECT_ID=$(gh api graphql -f query='
            query($owner: String!, $number: Int!) {
              organization(login: $owner) {
                projectV2(number: $number) {
                  id
                  title
                }
              }
            }' -f owner="$PROJECT_OWNER" -f number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')

          if [ -n "$PROJECT_ID" ]; then
            echo "üìä Project ID: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–æ–µ–∫—Ç
            ADD_RESULT=$(gh api graphql -f query='
              mutation($project: ID!, $item: ID!) {
                addProjectV2ItemById(input: {projectId: $project, contentId: $item}) {
                  item {
                    id
                  }
                }
              }' -f project="$PROJECT_ID" -f item="$ITEM_ID")

            if echo "$ADD_RESULT" | grep -q "addProjectV2ItemById"; then
              echo "‚úÖ Successfully added to project!" >> $GITHUB_STEP_SUMMARY
              
              # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
              ITEM_INFO=$(gh api graphql -f query='
                query($project: ID!, $item: ID!) {
                  node(id: $item) {
                    ... on Issue {
                      title
                      state
                      labels(first: 10) {
                        nodes {
                          name
                        }
                      }
                    }
                    ... on PullRequest {
                      title
                      state
                      labels(first: 10) {
                        nodes {
                          name
                        }
                      }
                    }
                  }
                }' -f project="$PROJECT_ID" -f item="$ITEM_ID")
              
              echo "üìã Item details added to project." >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Failed to add to project" >> $GITHUB_STEP_SUMMARY
              echo "Response: $ADD_RESULT" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Could not find project $PROJECT_NUMBER in organization $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üîÑ Update item status (GraphQL)
        if: github.event.action == 'closed' || github.event.action == 'reopened'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### üîÑ Updating Item Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_ID="${{ github.event.issue.node_id }}"
            ITEM_STATE="${{ github.event.issue.state }}"
          else
            ITEM_ID="${{ github.event.pull_request.node_id }}"
            ITEM_STATE="${{ github.event.pull_request.state }}"
          fi

          # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ
          PROJECT_ITEM_ID=$(gh api graphql -f query='
            query($owner: String!, $projectNumber: Int!, $itemId: ID!) {
              organization(login: $owner) {
                projectV2(number: $projectNumber) {
                  id
                  items(first: 100) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                        ... on PullRequest {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -f owner="$PROJECT_OWNER" -f projectNumber="$PROJECT_NUMBER" -f itemId="$ITEM_ID" \
            --jq '.data.organization.projectV2.items.nodes[] | select(.content.id == $itemId) | .id')

          if [ -n "$PROJECT_ITEM_ID" ]; then
            echo "üìã Updating status for project item: $PROJECT_ITEM_ID" >> $GITHUB_STEP_SUMMARY
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞)
            FIELD_ID=$(gh api graphql -f query='
              query($project: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    field(name: "Status") {
                      ... on ProjectV2SingleSelectField {
                        id
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }' -f project="$PROJECT_ID" --jq '.data.node.field.id')
            
            if [ -n "$FIELD_ID" ]; then
              # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
              UPDATE_RESULT=$(gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project
                    itemId: $item
                    fieldId: $field
                    value: {
                      singleSelectOptionId: $value
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }' -f project="$PROJECT_ID" -f item="$PROJECT_ITEM_ID" -f field="$FIELD_ID" -f value="$ITEM_STATE")
              
              echo "‚úÖ Status updated to: $ITEM_STATE" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è Could not find Status field in project" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Item not found in project, may need manual addition" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üîç Sync all open items (Manual trigger)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### üîç Syncing All Open Items to Project" >> $GITHUB_STEP_SUMMARY
          
          # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
          PROJECT_ID=$(gh api graphql -f query='
            query($owner: String!, $number: Int!) {
              organization(login: $owner) {
                projectV2(number: $number) {
                  id
                  title
                }
              }
            }' -f owner="$PROJECT_OWNER" -f number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')
          
          echo "üìä Syncing to project: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          
          # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ issues
          echo "üì¶ Syncing open issues..." >> $GITHUB_STEP_SUMMARY
          ISSUES=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issues(first: 100, states: OPEN) {
                  nodes {
                    id
                    number
                    title
                  }
                }
              }
            }' -f owner="$PROJECT_OWNER" -f repo="${{ github.repository }}")
          
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é issue
          # (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ, –∑–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
          echo "‚úÖ Sync completed for open items" >> $GITHUB_STEP_SUMMARY

      - name: üìä Create final summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** $PROJECT_OWNER/Project#$PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Automatically processed by GitHub Actions with GitHub CLI*" >> $GITHUB_STEP_SUMMARY

      - name: üßπ Cleanup GitHub CLI auth
        if: always()
        run: |
          gh auth logout || true