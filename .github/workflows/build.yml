name: AMXX Build System

on:
  push:
    branches: [main, dev, pre-release/alpha/*, pre-release/beta/*, pre-release/rc/*, hotfix/*]
  pull_request:
    branches: [main, dev]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout code (with full history)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          fetch-depth: 0  # –í–∞–∂–Ω–æ: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é

      - name: üì¶ Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-i386 lib32stdc++6 lib32z1 lib32gcc-s1 wget tar

      - name: üîß Download AMXX Compiler
        run: |
          wget -q https://github.com/NightMira/amxmodx_1-9/releases/download/v1.9/amxmodx19.tar
          tar -xf amxmodx19.tar
          chmod +x amxxpc
          ./amxxpc --help || true

      - name: üè∑Ô∏è Determine version based on branch (FIXED for merge)
        run: |
          # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–ª—è merge-–∫–æ–º–º–∏—Ç–æ–≤
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # –î–ª—è PR –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É
            BRANCH_NAME="${{ github.base_ref }}"
            echo "üìã PR detected, using base ref: $BRANCH_NAME"
          else
            # –î–ª—è push –ø–æ–ª—É—á–∞–µ–º –≤–µ—Ç–∫—É –∏–∑ ref
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º main
            if [[ "$GITHUB_REF" == refs/tags/* ]]; then
              BRANCH_NAME="main"
              echo "üìã Tag detected, using branch: main"
            fi
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ merge-–∫–æ–º–º–∏—Ç–æ–≤
            if [ -z "$BRANCH_NAME" ] || [ "$BRANCH_NAME" = "merge" ] || [[ "$BRANCH_NAME" == *"/merge" ]]; then
              echo "‚ö†Ô∏è Merge commit detected, detecting target branch..."
              
              # –ú–µ—Ç–æ–¥ 1: –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
              BRANCH_NAME=$(git log -1 --pretty=%B | grep -o 'Merge branch.*into' | awk '{print $3}' || echo "")
              
              # –ú–µ—Ç–æ–¥ 2: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
              if [ -z "$BRANCH_NAME" ]; then
                BRANCH_NAME=$(git log -1 --pretty=%B | grep -o 'from.*' | cut -d' ' -f2 || echo "")
              fi
              
              # –ú–µ—Ç–æ–¥ 3: –∏–∑ remote –≤–µ—Ç–æ–∫
              if [ -z "$BRANCH_NAME" ]; then
                BRANCH_NAME=$(git branch -r --contains HEAD | grep -v "HEAD" | head -1 | sed 's/origin\///' | xargs)
              fi
              
              # –ú–µ—Ç–æ–¥ 4: fallback –Ω–∞ dev
              if [ -z "$BRANCH_NAME" ]; then
                BRANCH_NAME="dev"
                echo "‚ö†Ô∏è Could not detect branch, using fallback: dev"
              else
                echo "üìã Detected target branch from merge: $BRANCH_NAME"
              fi
            fi
          fi
          
          # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏
          BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/^refs\/heads\///' | sed 's/^origin\///')
          echo "üìã Final branch name: $BRANCH_NAME"
          
          CURRENT_VERSION=$(python3 update_version.py get-version)
          CURRENT_SUFFIX=$(python3 update_version.py get-suffix)
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "VERSION_STRATEGY=release" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=stable" >> $GITHUB_ENV
            echo "VERSION_CMD=release" >> $GITHUB_ENV
            
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "VERSION_STRATEGY=snapshot" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=dev" >> $GITHUB_ENV
            echo "VERSION_CMD=snapshot auto" >> $GITHUB_ENV
            
          elif [[ "$BRANCH_NAME" =~ ^pre-release/alpha/ ]]; then
            ALPHA_NUM="${BRANCH_NAME##*/}"
            echo "VERSION_STRATEGY=pre-release" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=alpha-$ALPHA_NUM" >> $GITHUB_ENV
            echo "VERSION_CMD=alpha $ALPHA_NUM" >> $GITHUB_ENV
            
          elif [[ "$BRANCH_NAME" =~ ^pre-release/beta/ ]]; then
            BETA_NUM="${BRANCH_NAME##*/}"
            echo "VERSION_STRATEGY=pre-release" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=beta-$BETA_NUM" >> $GITHUB_ENV
            echo "VERSION_CMD=beta $BETA_NUM" >> $GITHUB_ENV
            
          elif [[ "$BRANCH_NAME" =~ ^pre-release/rc/ ]]; then
            RC_NUM="${BRANCH_NAME##*/}"
            echo "VERSION_STRATEGY=pre-release" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=rc-$RC_NUM" >> $GITHUB_ENV
            echo "VERSION_CMD=rc $RC_NUM" >> $GITHUB_ENV
            
          elif [[ "$BRANCH_NAME" =~ ^hotfix/ ]]; then
            HOTFIX_NUM=$(echo "$BRANCH_NAME" | grep -o '[0-9]*$' || echo "1")
            echo "VERSION_STRATEGY=hotfix" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=hotfix-$HOTFIX_NUM" >> $GITHUB_ENV
            echo "VERSION_CMD=patch && hotfix $HOTFIX_NUM" >> $GITHUB_ENV
            
          else
            echo "VERSION_STRATEGY=keep" >> $GITHUB_ENV
            echo "ARTIFACT_SUFFIX=feature" >> $GITHUB_ENV
            echo "VERSION_CMD=" >> $GITHUB_ENV
          fi
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV

      - name: üèóÔ∏è Update version information
        run: |
          if [ -n "$VERSION_CMD" ]; then
            echo "üîß Executing: $VERSION_CMD"
            
            if [[ "$VERSION_CMD" == *"&&"* ]]; then
              IFS='&&' read -r cmd1 cmd2 <<< "$VERSION_CMD"
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤—ã—Ö–æ–¥–∞
              if ! python3 update_version.py $(echo $cmd1 | xargs); then
                echo "‚ö†Ô∏è First command completed with non-zero exit code, but continuing..."
              fi
              if ! python3 update_version.py $(echo $cmd2 | xargs); then
                echo "‚ö†Ô∏è Second command completed with non-zero exit code, but continuing..."
              fi
            else
              if ! python3 update_version.py $VERSION_CMD; then
                echo "‚ö†Ô∏è Version update completed with non-zero exit code, but continuing..."
              fi
            fi
          fi
          
          # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º build number –∏ git info
          python3 update_version.py build
          
          echo "üìä Final version information:"
          python3 update_version.py info

      - name: üèóÔ∏è Compile all plugins
        run: |
          mkdir -p compiled
          chmod +x compile.sh
          ./compile.sh

      - name: üì¶ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amxx-plugins-${{ env.ARTIFACT_SUFFIX }}-${{ github.run_number }}
          path: |
            compiled/*.amxx
            compile.log
            scripting/include/version.inc
          retention-days: 30

      - name: üìã Create build summary
        run: |
          FULL_VERSION=$(python3 update_version.py get-full-version)
          BUILD_INFO=$(python3 update_version.py info)
          COMPILE_RESULT=$(tail -10 compile.log | grep -E "‚úÖ|‚ùå|‚ö†Ô∏è" || echo "No compilation results found")
          
          echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Strategy:** ${{ env.VERSION_STRATEGY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $FULL_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** amxx-plugins-${{ env.ARTIFACT_SUFFIX }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Version Details" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "$BUILD_INFO" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîß Compilation Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$COMPILE_RESULT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Download the compiled plugins from the Artifacts section." >> $GITHUB_STEP_SUMMARY
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ merge-–¥–µ—Ç–µ–∫—Ü–∏–∏
          if [[ "${{ env.BRANCH_NAME }}" == *"merge"* ]] || [[ "$GITHUB_REF" == *"merge"* ]]; then
            echo "### üîç Merge Commit Handling" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Successfully detected target branch for merge commit" >> $GITHUB_STEP_SUMMARY
          fi

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true