name: Project Automation (GitHub CLI)

on:
  issues:
    types: [opened, reopened, closed, labeled]
  pull_request:
    types: [opened, reopened, closed, ready_for_review, labeled]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues/PRs to project'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PROJECT_NUMBER: 3
  PROJECT_OWNER: NightMira  # –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

jobs:
  project-automation:
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: üì¶ Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: üîë Authenticate GitHub CLI
        run: |
          echo "${{ secrets.PRIVATE_REPO_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: üìã Process project items
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "## üóÇÔ∏è Project Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_TYPE="issue"
            ITEM_NUMBER=${{ github.event.issue.number }}
            ITEM_TITLE="${{ github.event.issue.title }}"
            ITEM_ACTION="${{ github.event.action }}"
          else
            ITEM_TYPE="pull request"
            ITEM_NUMBER=${{ github.event.pull_request.number }}
            ITEM_TITLE="${{ github.event.pull_request.title }}"
            ITEM_ACTION="${{ github.event.action }}"
          fi

          echo "### üìù $ITEM_TYPE Processing" >> $GITHUB_STEP_SUMMARY
          echo "- **$ITEM_TYPE:** #$ITEM_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Title:** $ITEM_TITLE" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** $ITEM_ACTION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üéØ Add item to user project
        if: github.event_name == 'issues' && github.event.action == 'opened' || github.event_name == 'pull_request' && github.event.action == 'opened'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### üéØ Adding to User Project" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "issues" ]; then
            ITEM_NUMBER=${{ github.event.issue.number }}
            ITEM_URL="https://github.com/${{ github.repository }}/issues/$ITEM_NUMBER"
          else
            ITEM_NUMBER=${{ github.event.pull_request.number }}
            ITEM_URL="https://github.com/${{ github.repository }}/pull/$ITEM_NUMBER"
          fi

          echo "üîß Adding item #$ITEM_NUMBER to user project..." >> $GITHUB_STEP_SUMMARY
          
          # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ gh cli
          if gh project item-add $PROJECT_NUMBER --user $PROJECT_OWNER --url "$ITEM_URL" 2>/dev/null; then
            echo "‚úÖ Successfully added to user project!" >> $GITHUB_STEP_SUMMARY
            echo "üìä Project: https://github.com/users/$PROJECT_OWNER/projects/$PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Method 1 failed, trying GraphQL..." >> $GITHUB_STEP_SUMMARY
            
            # –ú–µ—Ç–æ–¥ 2: GraphQL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            PROJECT_ID=$(gh api graphql -f query='
              query($user: String!, $projectNumber: Int!) {
                user(login: $user) {
                  projectV2(number: $projectNumber) {
                    id
                    title
                  }
                }
              }' -f user="$PROJECT_OWNER" -f projectNumber="$PROJECT_NUMBER" --jq '.data.user.projectV2.id')
            
            if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
              echo "üìä User Project ID: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
              
              if [ "${{ github.event_name }}" = "issues" ]; then
                ITEM_ID="${{ github.event.issue.node_id }}"
              else
                ITEM_ID="${{ github.event.pull_request.node_id }}"
              fi
              
              # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ GraphQL
              ADD_RESULT=$(gh api graphql -f query='
                mutation($projectId: ID!, $itemId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $itemId}) {
                    item {
                      id
                    }
                  }
                }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID" 2>/dev/null)
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Successfully added via GraphQL!" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå GraphQL method also failed" >> $GITHUB_STEP_SUMMARY
                echo "üí° Manual addition required: gh project item-add 3 --user NightMira --url \"$ITEM_URL\"" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "‚ùå Could not find user project $PROJECT_NUMBER for user $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: üîç Sync all open items (Manual trigger)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### üîç Syncing All Open Items to Project" >> $GITHUB_STEP_SUMMARY
          
          # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          PROJECT_ID=$(gh api graphql -f query='
            query($user: String!, $projectNumber: Int!) {
              user(login: $user) {
                projectV2(number: $projectNumber) {
                  id
                  title
                  number
                }
              }
            }' -f user="$PROJECT_OWNER" -f projectNumber="$PROJECT_NUMBER" --jq '.data.user.projectV2.id')
          
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "‚ùå User project not found:" >> $GITHUB_STEP_SUMMARY
            echo "- User: $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
            echo "- Project number: $PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "- URL: https://github.com/users/$PROJECT_OWNER/projects/$PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "‚úÖ Project found: $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          echo "üìä Starting sync of open items..." >> $GITHUB_STEP_SUMMARY
          
          # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ issues
          echo "üì¶ Syncing open issues..." >> $GITHUB_STEP_SUMMARY
          OPEN_ISSUES=$(gh issue list --state open --limit 20 --json number,title,url)
          
          ISSUE_COUNT=$(echo "$OPEN_ISSUES" | jq length)
          echo "Found $ISSUE_COUNT open issues" >> $GITHUB_STEP_SUMMARY
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é issue –≤ –ø—Ä–æ–µ–∫—Ç
          echo "$OPEN_ISSUES" | jq -c '.[]' | while read issue; do
            ISSUE_NUMBER=$(echo "$issue" | jq -r '.number')
            ISSUE_URL=$(echo "$issue" | jq -r '.url')
            
            echo "Adding issue #$ISSUE_NUMBER to project..." >> $GITHUB_STEP_SUMMARY
            gh project item-add $PROJECT_NUMBER --user $PROJECT_OWNER --url "$ISSUE_URL" 2>/dev/null && echo "‚úÖ Added #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY || echo "‚ö†Ô∏è Failed #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
          done
          
          # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ PR
          echo "üì¶ Syncing open pull requests..." >> $GITHUB_STEP_SUMMARY
          OPEN_PRS=$(gh pr list --state open --limit 20 --json number,title,url)
          
          PR_COUNT=$(echo "$OPEN_PRS" | jq length)
          echo "Found $PR_COUNT open PRs" >> $GITHUB_STEP_SUMMARY
          
          echo "$OPEN_PRS" | jq -c '.[]' | while read pr; do
            PR_NUMBER=$(echo "$pr" | jq -r '.number')
            PR_URL=$(echo "$pr" | jq -r '.url')
            
            echo "Adding PR #$PR_NUMBER to project..." >> $GITHUB_STEP_SUMMARY
            gh project item-add $PROJECT_NUMBER --user $PROJECT_OWNER --url "$PR_URL" 2>/dev/null && echo "‚úÖ Added PR #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY || echo "‚ö†Ô∏è Failed PR #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "‚úÖ Sync completed!" >> $GITHUB_STEP_SUMMARY

      - name: üß™ Debug user project access
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### üß™ Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          USER_PROJECTS=$(gh api graphql -f query='
            query($user: String!) {
              user(login: $user) {
                name
                projectsV2(first: 10) {
                  nodes {
                    number
                    title
                    id
                    url
                  }
                }
              }
            }' -f user="$PROJECT_OWNER" --jq '.data.user')
          
          if [ -n "$USER_PROJECTS" ] && [ "$USER_PROJECTS" != "null" ]; then
            echo "‚úÖ Access to user $PROJECT_OWNER confirmed" >> $GITHUB_STEP_SUMMARY
            echo "üìä User projects:" >> $GITHUB_STEP_SUMMARY
            echo "$USER_PROJECTS" | jq -r '.projectsV2.nodes[] | "\(.number): \(.title) - \(.url)"' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Cannot access user $PROJECT_OWNER" >> $GITHUB_STEP_SUMMARY
            echo "Please check:" >> $GITHUB_STEP_SUMMARY
            echo "- Token permissions" >> $GITHUB_STEP_SUMMARY
            echo "- User name spelling" >> $GITHUB_STEP_SUMMARY
            echo "- Project visibility (should be public or token should have access)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìä Create final summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **User Project:** https://github.com/users/$PROJECT_OWNER/projects/$PROJECT_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Automatically processed by GitHub Actions with GitHub CLI*" >> $GITHUB_STEP_SUMMARY

      - name: üßπ Cleanup GitHub CLI auth
        if: always()
        run: |
          gh auth logout || true