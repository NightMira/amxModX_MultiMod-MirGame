name: Project Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed, ready_for_review]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues/PRs to project'
        required: false
        default: false
        type: boolean

jobs:
  project_automation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Add new items to project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/NightMira/projects/3
          github-token: ${{ secrets.PRIVATE_REPO_TOKEN }}
        if: |
          github.event.action == 'opened' || 
          github.event.action == 'reopened' || 
          github.event.action == 'ready_for_review'

      - name: Update status for closed items
        if: github.event.action == 'closed'
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "🔄 Processing closed item..." >> $GITHUB_STEP_SUMMARY
          
          # Получаем данные проекта
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user="NightMira" -F number=3 > project_data.json
          
          PROJECT_ID=$(jq -r '.data.user.projectV2.id' project_data.json)
          STATUS_FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json)
          DONE_OPTION_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Done") | .id' project_data.json)
          
          if [ -n "$STATUS_FIELD_ID" ] && [ -n "$DONE_OPTION_ID" ]; then
            # Находим item в проекте и обновляем статус
            if [ "${{ github.event_name }}" = "issues" ]; then
              CONTENT_ID="${{ github.event.issue.node_id }}"
            else
              CONTENT_ID="${{ github.event.pull_request.node_id }}"
            fi
            
            ITEM_ID=$(gh api graphql -f query='
              query($project: ID!, $content: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                          ... on PullRequest {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }' -f project="$PROJECT_ID" -f content="$CONTENT_ID" \
              --jq '.data.node.items.nodes[] | select(.content.id == $content) | .id')
            
            if [ -n "$ITEM_ID" ]; then
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project
                    itemId: $item
                    fieldId: $field
                    value: {
                      singleSelectOptionId: $value
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }' -f project="$PROJECT_ID" -f item="$ITEM_ID" -f field="$STATUS_FIELD_ID" -f value="$DONE_OPTION_ID" --silent
              
              echo "✅ Status updated to Done" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Manual bulk sync
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "### 🔍 Manual Bulk Sync" >> $GITHUB_STEP_SUMMARY
          echo "📦 Adding all open issues and PRs to project..." >> $GITHUB_STEP_SUMMARY
          
          # Получаем PROJECT_ID (аналогично add-to-project action)
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                }
              }
            }' -f user="NightMira" -F number=3 > project_data.json
          
          PROJECT_ID=$(jq -r '.data.user.projectV2.id' project_data.json)
          
          # Функция для добавления в проект (аналогично action)
          add_to_project() {
            local content_id="$1"
            local item_type="$2"
            local number="$3"
            local title="$4"
            
            # Используем тот же подход что и в add-to-project
            gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f contentId="$content_id" --silent 2>/dev/null
            
            if [ $? -eq 0 ]; then
              echo "✅ $item_type #$number: $title" >> $GITHUB_STEP_SUMMARY
              return 0
            else
              # Если не удалось добавить напрямую, пробуем как draft issue
              gh api graphql -f query='
                mutation($projectId: ID!, $title: String!) {
                  addProjectV2DraftIssue(input: {
                    projectId: $projectId,
                    title: $title
                  }) {
                    projectItem {
                      id
                    }
                  }
                }' -f projectId="$PROJECT_ID" -f title="$title" --silent 2>/dev/null
              
              if [ $? -eq 0 ]; then
                echo "✅ $item_type #$number (as draft): $title" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ $item_type #$number: $title" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          }
          
          # Получаем issues через GraphQL API
          echo "🔍 Processing issues..." >> $GITHUB_STEP_SUMMARY
          gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issues(first: 100, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) {
                  nodes {
                    number
                    id
                    title
                    url
                  }
                }
              }
            }' -f owner="NightMira" -f repo="${{ github.event.repository.name }}" > issues.json
          
          added_count=0
          jq -c '.data.repository.issues.nodes[]' issues.json | while read -r issue; do
            number=$(echo "$issue" | jq -r '.number')
            id=$(echo "$issue" | jq -r '.id')
            title=$(echo "$issue" | jq -r '.title | sub("^(.{80}).*$"; "$1...")')
            url=$(echo "$issue" | jq -r '.url')
            
            add_to_project "$id" "Issue" "$number" "$title"
            if [ $? -eq 0 ]; then
              added_count=$((added_count + 1))
            fi
          done
          
          # Получаем PRs через GraphQL API
          echo "🔍 Processing PRs..." >> $GITHUB_STEP_SUMMARY
          gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                pullRequests(first: 100, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) {
                  nodes {
                    number
                    id
                    title
                    url
                  }
                }
              }
            }' -f owner="NightMira" -f repo="${{ github.event.repository.name }}" > prs.json
          
          jq -c '.data.repository.pullRequests.nodes[]' prs.json | while read -r pr; do
            number=$(echo "$pr" | jq -r '.number')
            id=$(echo "$pr" | jq -r '.id')
            title=$(echo "$pr" | jq -r '.title | sub("^(.{80}).*$"; "$1...")')
            url=$(echo "$pr" | jq -r '.url')
            
            add_to_project "$id" "PR" "$number" "$title"
            if [ $? -eq 0 ]; then
              added_count=$((added_count + 1))
            fi
          done
          
          echo "🎯 Manual sync completed! Added $added_count items to project." >> $GITHUB_STEP_SUMMARY