# –û—Ç–∫–ª—é—á–µ–Ω, –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
name: Project Automation

on:
#  issues:
#    types: [opened, reopened, closed]
#  pull_request:
#    types: [opened, reopened, closed, ready_for_review]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all open issues/PRs to project'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  project_automation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Add new items to project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/NightMira/projects/3
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: |
          github.event.action == 'opened' || 
          github.event.action == 'reopened' || 
          github.event.action == 'ready_for_review'

      - name: Update status for closed items
        if: github.event.action == 'closed'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Processing closed item..." >> $GITHUB_STEP_SUMMARY
          
          # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                        dataType
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user="${{ github.repository_owner }}" -F number=3 > project_data.json
          
          PROJECT_ID=$(jq -r '.data.user.projectV2.id' project_data.json)
          STATUS_FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name=="Status" and .dataType=="SINGLE_SELECT") | .id' project_data.json)
          DONE_OPTION_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name=="Status" and .dataType=="SINGLE_SELECT") | .options[] | select(.name=="Done") | .id' project_data.json)
          
          if [ -n "$STATUS_FIELD_ID" ] && [ -n "$DONE_OPTION_ID" ]; then
            if [ "${{ github.event_name }}" = "issues" ]; then
              CONTENT_ID="${{ github.event.issue.node_id }}"
            else
              CONTENT_ID="${{ github.event.pull_request.node_id }}"
            fi
            
            # –ù–∞—Ö–æ–¥–∏–º item –≤ –ø—Ä–æ–µ–∫—Ç–µ
            ITEM_ID=$(gh api graphql -f query='
              query($project: ID!, $content: ID!) {
                node(id: $project) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                          ... on PullRequest {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }' -f project="$PROJECT_ID" -f content="$CONTENT_ID" \
              --jq ".data.node.items.nodes[] | select(.content.id == \"$CONTENT_ID\") | .id")
            
            if [ -n "$ITEM_ID" ]; then
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project
                    itemId: $item
                    fieldId: $field
                    value: {
                      singleSelectOptionId: $value
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }' -f project="$PROJECT_ID" -f item="$ITEM_ID" -f field="$STATUS_FIELD_ID" -f value="$DONE_OPTION_ID" --silent
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Status updated to Done for item $ITEM_ID" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå Failed to update status" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "‚ö†Ô∏è Item not found in project" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Status field or Done option not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Manual bulk sync
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.sync_all == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "### üîç Manual Bulk Sync" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ Adding all open issues and PRs to project..." >> $GITHUB_STEP_SUMMARY
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
          echo "üîê Checking repository access..." >> $GITHUB_STEP_SUMMARY
          gh api "repos/${{ github.repository }}" --jq '.name' >> $GITHUB_STEP_SUMMARY 2>&1 || echo "‚ùå Cannot access repository" >> $GITHUB_STEP_SUMMARY
          
          # –ü–æ–ª—É—á–∞–µ–º PROJECT_ID
          gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                  title
                }
              }
            }' -f user="${{ github.repository_owner }}" -F number=3 > project_data.json
          
          PROJECT_ID=$(jq -r '.data.user.projectV2.id' project_data.json)
          PROJECT_TITLE=$(jq -r '.data.user.projectV2.title' project_data.json)
          
          echo "üéØ Working with project: $PROJECT_TITLE" >> $GITHUB_STEP_SUMMARY
          
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç
          add_to_project() {
            local content_id="$1"
            local item_type="$2"
            local number="$3"
            local title="$4"
            
            result=$(gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }' -f projectId="$PROJECT_ID" -f contentId="$content_id" --silent 2>&1)
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ $item_type #$number: $title" >> $GITHUB_STEP_SUMMARY
              return 0
            else
              if echo "$result" | grep -q "already exists"; then
                echo "‚ÑπÔ∏è  $item_type #$number already in project: $title" >> $GITHUB_STEP_SUMMARY
                return 0
              elif echo "$result" | grep -q "Resource not accessible by integration"; then
                echo "üîê $item_type #$number: Token lacks permissions" >> $GITHUB_STEP_SUMMARY
                return 1
              else
                echo "‚ö†Ô∏è Failed to add $item_type #$number: $title" >> $GITHUB_STEP_SUMMARY
                echo "   Error: $result" >> $GITHUB_STEP_SUMMARY
                return 1
              fi
            fi
          }
          
          # –ü–æ–ª—É—á–∞–µ–º issues –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          echo "üîç Processing issues..." >> $GITHUB_STEP_SUMMARY
          gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issues(first: 100, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) {
                  nodes {
                    number
                    id
                    title
                    state
                  }
                }
              }
            }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" > issues.json
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to fetch issues from private repository" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          added_count=0
          while IFS= read -r issue; do
            if [ -n "$issue" ]; then
              number=$(echo "$issue" | jq -r '.number')
              id=$(echo "$issue" | jq -r '.id')
              title=$(echo "$issue" | jq -r '.title' | head -c 80)
              state=$(echo "$issue" | jq -r '.state')
              
              if [ "$state" = "OPEN" ]; then
                if add_to_project "$id" "Issue" "$number" "$title"; then
                  added_count=$((added_count + 1))
                fi
              fi
            fi
          done < <(jq -c '.data.repository.issues.nodes[]' issues.json)
          
          # –ü–æ–ª—É—á–∞–µ–º PRs –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          echo "üîç Processing PRs..." >> $GITHUB_STEP_SUMMARY
          gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                pullRequests(first: 100, states: OPEN, orderBy: {field: CREATED_AT, direction: DESC}) {
                  nodes {
                    number
                    id
                    title
                    state
                  }
                }
              }
            }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" > prs.json
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to fetch PRs from private repository" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          while IFS= read -r pr; do
            if [ -n "$pr" ]; then
              number=$(echo "$pr" | jq -r '.number')
              id=$(echo "$pr" | jq -r '.id')
              title=$(echo "$pr" | jq -r '.title' | head -c 80)
              state=$(echo "$pr" | jq -r '.state')
              
              if [ "$state" = "OPEN" ]; then
                if add_to_project "$id" "PR" "$number" "$title"; then
                  added_count=$((added_count + 1))
                fi
              fi
            fi
          done < <(jq -c '.data.repository.pullRequests.nodes[]' prs.json)
          
          echo "üéØ Manual sync completed! Added $added_count items to project." >> $GITHUB_STEP_SUMMARY
